{"version":3,"sources":["scripts/main.js"],"names":["ClassActions","ADD","DELETE","REPLACE","isStarted","isWon","isLose","loseMessage","document","querySelector","winMessage","startMessage","actionButton","rows","querySelectorAll","scoreTable","cells","rowSize","addEventListener","handleGameStatus","e","key","moveAllRight","moveAllLeft","moveAllDown","moveAllUp","checkForWin","checkForLose","isGameStarted","restartGame","startGame","handleCellClasses","element","value","action","classList","add","remove","className","forEach","row","rowArray","children","moveSingleSetOfCells","createCell","reverse","getCols","col","inputRows","arrayOfCols","i","length","j","push","setOfCells","currentCellValue","innerHTML","nextCellValue","notEmpty","haveSameValues","newValue","isCurrentEmpty","emptyCells","filter","cell","randomCellIndex","randomize","undefined","cellValue","Math","random","emptyCellsArray","floor","placeTwoCells","cols","checkSetOfCells","handleLose","checkCells","arrayOfCells","curretCellValue","hasTurns","Array","isArray","find"],"mappings":"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","file":"main.6e207b27.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst ClassActions = {\n  ADD: 'add',\n  DELETE: 'delete',\n  REPLACE: 'replace',\n};\n\nlet isStarted = false;\nlet isWon = false;\nlet isLose = false;\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst startMessage = document.querySelector('.message-start');\nconst actionButton = document.querySelector('.start');\nconst rows = [...document.querySelectorAll('.field-row')];\nconst scoreTable = document.querySelector('.game-score');\n\nconst cells = [...document.querySelectorAll('.field-cell')];\nconst rowSize = 4;\n\nactionButton.addEventListener('click', () => {\n  isStarted = handleGameStatus(isStarted);\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (!isStarted) {\n    return;\n  }\n\n  if (e.key === 'ArrowRight') {\n    moveAllRight();\n  }\n\n  if (e.key === 'ArrowLeft') {\n    moveAllLeft();\n  }\n\n  if (e.key === 'ArrowDown') {\n    moveAllDown();\n  }\n\n  if (e.key === 'ArrowUp') {\n    moveAllUp();\n  }\n\n  checkForWin();\n  checkForLose();\n});\n\nconst handleGameStatus = (isGameStarted) => {\n  if (isGameStarted || isWon || isLose) {\n    restartGame();\n  } else {\n    startGame();\n  }\n\n  return true;\n};\n\nconst handleCellClasses = (element, value, action) => {\n  switch (action) {\n    case ClassActions.ADD:\n      element.classList.add(`field-cell--${value}`);\n      break;\n\n    case ClassActions.DELETE:\n      element.classList.remove(`field-cell--${value}`);\n      break;\n\n    case ClassActions.REPLACE:\n      element.className = `field-cell field-cell--${value}`;\n      break;\n\n    default:\n      break;\n  }\n};\n\nconst moveAllRight = () => {\n  rows.forEach(row => {\n    const rowArray = [...row.children];\n\n    moveSingleSetOfCells(rowArray);\n  });\n\n  createCell();\n};\n\nconst moveAllLeft = () => {\n  rows.forEach(row => {\n    const rowArray = [...row.children].reverse();\n\n    moveSingleSetOfCells(rowArray);\n  });\n\n  createCell();\n};\n\nconst moveAllDown = () => {\n  const cols = getCols(rows);\n\n  cols.forEach(col => {\n    moveSingleSetOfCells(col);\n  });\n\n  createCell();\n};\n\nconst moveAllUp = () => {\n  const cols = getCols(rows).reverse();\n\n  cols.forEach(col => {\n    moveSingleSetOfCells(col.reverse());\n  });\n\n  createCell();\n};\n\nconst getCols = (inputRows) => {\n  const arrayOfCols = [];\n\n  for (let i = 0; i < inputRows.length; i++) {\n    const col = [];\n\n    for (let j = 0; j < inputRows.length; j++) {\n      col.push(inputRows[j].children[i]);\n    }\n    arrayOfCols.push(col);\n  }\n\n  return arrayOfCols;\n};\n\nconst moveSingleSetOfCells = (setOfCells) => {\n  for (let i = 0; i < rowSize - 1; i++) {\n    const currentCellValue = +setOfCells[i].innerHTML;\n\n    for (let j = i + 1; j < rowSize; j++) {\n      const nextCellValue = +setOfCells[j].innerHTML;\n      const notEmpty = currentCellValue !== 0 && nextCellValue !== 0;\n      const haveSameValues = currentCellValue === nextCellValue;\n\n      if (!haveSameValues && notEmpty) {\n        break;\n      }\n\n      if (haveSameValues && notEmpty) {\n        const newValue = currentCellValue + currentCellValue;\n\n        setOfCells[i].innerHTML = newValue;\n\n        handleCellClasses(\n          setOfCells[i],\n          setOfCells[i].innerHTML,\n          ClassActions.REPLACE\n        );\n\n        handleCellClasses(setOfCells[j], currentCellValue, ClassActions.DELETE);\n        setOfCells[j].innerHTML = '';\n\n        scoreTable.innerHTML = +scoreTable.innerHTML + newValue;\n\n        break;\n      }\n    }\n  }\n\n  for (let i = rowSize - 1; i > 0; i--) {\n    const isCurrentEmpty = setOfCells[i].innerHTML === '';\n\n    for (let j = i - 1; j >= 0; j--) {\n      if (isCurrentEmpty && setOfCells[j].innerHTML !== '') {\n        setOfCells[i].innerHTML = setOfCells[j].innerHTML;\n\n        handleCellClasses(\n          setOfCells[i],\n          setOfCells[j].innerHTML,\n          ClassActions.ADD\n        );\n\n        handleCellClasses(\n          setOfCells[j],\n          setOfCells[j].innerHTML,\n          ClassActions.DELETE\n        );\n        setOfCells[j].innerHTML = '';\n        break;\n      }\n    }\n  }\n};\n\nconst createCell = () => {\n  const emptyCells = cells.filter(cell => {\n    return cell.innerHTML === '';\n  });\n  const randomCellIndex = randomize(emptyCells);\n\n  if (randomCellIndex !== undefined) {\n    const cellValue = Math.random() < 0.9 ? 2 : 4;\n\n    emptyCells[randomCellIndex].innerHTML = cellValue;\n    handleCellClasses(emptyCells[randomCellIndex], cellValue, ClassActions.ADD);\n  }\n};\n\nconst randomize = (emptyCellsArray) => {\n  if (emptyCellsArray.length) {\n    return Math.floor(Math.random() * emptyCellsArray.length);\n  }\n};\n\nconst placeTwoCells = () => {\n  createCell();\n  createCell();\n};\n\nconst startGame = () => {\n  placeTwoCells();\n  startMessage.classList.add('hidden');\n  actionButton.className = 'button restart';\n  actionButton.innerHTML = 'Restart';\n};\n\nconst restartGame = () => {\n  scoreTable.innerHTML = 0;\n\n  if (isWon) {\n    winMessage.classList.add('hidden');\n  }\n\n  if (isLose) {\n    loseMessage.classList.add('hidden');\n  }\n\n  cells.forEach(cell => {\n    cell.innerHTML = '';\n    cell.className = 'field-cell';\n  });\n\n  placeTwoCells();\n};\n\nconst checkForLose = () => {\n  const emptyCellsArray = cells.filter(cell => cell.innerHTML === '');\n  const cols = getCols(rows);\n\n  if (emptyCellsArray.length) {\n    return;\n  }\n\n  if (!checkSetOfCells(rows) && !checkSetOfCells(cols)) {\n    handleLose();\n  };\n};\n\nconst checkCells = (arrayOfCells) => {\n  for (let i = 0; i < arrayOfCells.length - 1; i++) {\n    const curretCellValue = +arrayOfCells[i].innerHTML;\n    const nextCellValue = +arrayOfCells[i + 1].innerHTML;\n\n    if (curretCellValue === nextCellValue) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst checkSetOfCells = (setOfCells) => {\n  for (let i = 0; i < setOfCells.length; i++) {\n    const row = setOfCells[i];\n    let rowArray = [];\n\n    if (Array.isArray(row)) {\n      rowArray = row;\n    } else {\n      rowArray = [...row.children];\n    }\n\n    const hasTurns = checkCells(rowArray);\n\n    if (hasTurns) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nconst checkForWin = () => {\n  isWon = cells.find(cell => cell.innerHTML === '2048') !== undefined;\n\n  if (isWon) {\n    winMessage.classList.remove('hidden');\n    isStarted = false;\n  }\n};\n\nconst handleLose = () => {\n  isStarted = false;\n  loseMessage.classList.remove('hidden');\n  isLose = true;\n};\n"]}